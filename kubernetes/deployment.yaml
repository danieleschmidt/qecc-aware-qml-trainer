apiVersion: apps/v1
kind: Deployment
metadata:
  name: qecc-qml-app
  namespace: qecc-qml
  labels:
    app: qecc-qml
    component: api
    version: v0.1.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: qecc-qml
      component: api
  template:
    metadata:
      labels:
        app: qecc-qml
        component: api
        version: v0.1.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: qecc-qml-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: qecc-qml
        image: qecc-qml:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: monitoring
          protocol: TCP
        env:
        - name: QECC_QML_LOG_LEVEL
          value: "INFO"
        - name: QECC_QML_ENABLE_TELEMETRY
          value: "true"
        - name: QECC_QML_MAX_WORKERS
          value: "4"
        - name: REDIS_URL
          value: "redis://qecc-qml-redis:6379/0"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: qecc-qml-secrets
              key: postgres-url
        - name: PROMETHEUS_GATEWAY
          value: "http://qecc-qml-prometheus-pushgateway:9091"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: models-volume
          mountPath: /app/models
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: qecc-qml-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: qecc-qml-data-pvc
      - name: models-volume
        persistentVolumeClaim:
          claimName: qecc-qml-models-pvc
      - name: logs-volume
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "quantum-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - qecc-qml
              topologyKey: kubernetes.io/hostname

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qecc-qml-worker
  namespace: qecc-qml
  labels:
    app: qecc-qml
    component: worker
    version: v0.1.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: qecc-qml
      component: worker
  template:
    metadata:
      labels:
        app: qecc-qml
        component: worker
        version: v0.1.0
    spec:
      serviceAccountName: qecc-qml-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: qecc-qml-worker
        image: qecc-qml:latest
        imagePullPolicy: IfNotPresent
        command: ["celery", "-A", "qecc_qml.tasks", "worker", "--loglevel=info"]
        env:
        - name: CELERY_BROKER_URL
          value: "redis://qecc-qml-redis:6379/0"
        - name: CELERY_RESULT_BACKEND
          value: "redis://qecc-qml-redis:6379/0"
        - name: QECC_QML_LOG_LEVEL
          value: "INFO"
        - name: POSTGRES_URL
          valueFrom:
            secretKeyRef:
              name: qecc-qml-secrets
              key: postgres-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: models-volume
          mountPath: /app/models
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: qecc-qml-data-pvc
      - name: models-volume
        persistentVolumeClaim:
          claimName: qecc-qml-models-pvc
      nodeSelector:
        node-type: cpu-intensive
      tolerations:
      - key: "quantum-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qecc-qml-redis
  namespace: qecc-qml
  labels:
    app: qecc-qml
    component: redis
spec:
  serviceName: qecc-qml-redis
  replicas: 1
  selector:
    matchLabels:
      app: qecc-qml
      component: redis
  template:
    metadata:
      labels:
        app: qecc-qml
        component: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - --appendonly
        - "yes"
        - --save
        - "900 1"
        - --save
        - "300 10"
        - --save
        - "60 10000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: qecc-qml-postgres
  namespace: qecc-qml
  labels:
    app: qecc-qml
    component: postgres
spec:
  serviceName: qecc-qml-postgres
  replicas: 1
  selector:
    matchLabels:
      app: qecc-qml
      component: postgres
  template:
    metadata:
      labels:
        app: qecc-qml
        component: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "qecc_qml"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: qecc-qml-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qecc-qml-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-init-config
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 20Gi

---
# Horizontal Pod Autoscaler for the main application
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qecc-qml-hpa
  namespace: qecc-qml
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qecc-qml-app
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: quantum_circuits_per_second
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: qecc-qml-pdb
  namespace: qecc-qml
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: qecc-qml
      component: api